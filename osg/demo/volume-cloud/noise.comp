#version 450

layout(r32f, binding = 0) uniform image3D noiseTex;
layout(local_size_x = 16, local_size_y = 16, local_size_z = 4) in;

vec3 random3(vec3 p)
{
	float j = 4096.0 * sin(dot(p, vec3(17.0, 59.4, 15.0)));
	vec3 r;
	r.z = fract(1024.0 * j);
	j *= .125;
	r.x = fract(512.0 * j);
	j *= .125;
	r.y = fract(256.0 * j);
	return r - 0.5;

	//vec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));
	//p3 += dot(p3, p3.yxz + 33.33);
	//return fract((p3.xxy + p3.yzz) * p3.zyx) - 0.5;
}

const float F3 = 0.3333333;
const float G3 = 0.1666667;

float simplex3d(vec3 p)
{
	vec3 s = floor(p + dot(p, vec3(F3)));
	vec3 x = p - s + dot(s, vec3(G3));

	vec3 e = step(vec3(0.0), x - x.yzx);
	vec3 i1 = e * (1.0 - e.zxy);
	vec3 i2 = 1.0 - e.zxy * (1.0 - e);

	vec3 x1 = x - i1 + G3;
	vec3 x2 = x - i2 + 2.0 * G3;
	vec3 x3 = x - 1.0 + 3.0 * G3;

	vec4 w, d;

	w.x = dot(x, x);
	w.y = dot(x1, x1);
	w.z = dot(x2, x2);
	w.w = dot(x3, x3);

	w = max(0.6 - w, 0.0);

	d.x = dot(random3(s), x);
	d.y = dot(random3(s + i1), x1);
	d.z = dot(random3(s + i2), x2);
	d.w = dot(random3(s + 1.0), x3);

	w *= w;
	w *= w;
	d *= w;

	return dot(d, vec4(52.0));
}

void main()
{
	ivec3 pos = ivec3(gl_GlobalInvocationID.xyz);
	vec3 px = vec3(gl_GlobalInvocationID.xyz) / vec3(16.0, 16.0, 16.0);
	float value = simplex3d(px) * 0.5 + 0.5;
	imageStore(noiseTex, pos, vec4(value, 0, 0, 0));
}
